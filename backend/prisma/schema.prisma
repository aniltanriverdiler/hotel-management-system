datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  CUSTOMER
  HOTEL_OWNER
  SUPPORT
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELED
}

model User {
  user_id      Int            @id @default(autoincrement())
  name         String
  email        String         @unique
  password     String
  phone        String?
  role         UserRole       @default(CUSTOMER)
  created_at   DateTime       @default(now())
  hotels       Hotel[]        @relation("UserHotels")
  reservations Reservation[]  @relation("UserReservations")
  messagesSent Messages[]     @relation("MessageSender")
  messagesReceived Messages[] @relation("MessageReceiver")
}

model Hotel {
  hotel_id     Int      @id @default(autoincrement())
  name         String
  city         String
  address      String
  description  String?
  rating       Float?
  owner_id     Int
  owner        User     @relation("UserHotels", fields: [owner_id], references: [user_id])
  rooms        Room[]
  reservations Reservation[] @relation("HotelReservations")
  images       Image[]
  created_at   DateTime @default(now())
}

model Room {
  room_id    Int      @id @default(autoincrement())
  hotel_id   Int
  hotel      Hotel    @relation(fields: [hotel_id], references: [hotel_id])
  room_type  String
  price      Float
  capacity   Int
  description String?
  created_at DateTime @default(now())
  reservations Reservation[]
}

model Reservation {
  reservation_id Int      @id @default(autoincrement())
  user_id        Int
  user           User     @relation("UserReservations", fields: [user_id], references: [user_id])
  hotel_id       Int
  hotel          Hotel    @relation("HotelReservations", fields: [hotel_id], references: [hotel_id])
  room_id        Int
  room           Room     @relation(fields: [room_id], references: [room_id])
  start_date     DateTime
  end_date       DateTime
  total_price    Float?
  status         ReservationStatus @default(PENDING)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model Image {
  image_id   Int      @id @default(autoincrement())
  hotel_id   Int
  hotel      Hotel    @relation(fields: [hotel_id], references: [hotel_id])
  url        String
  created_at DateTime @default(now())
}

model Messages {
  message_id  Int      @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  sender      User     @relation("MessageSender", fields: [sender_id], references: [user_id])
  receiver    User     @relation("MessageReceiver", fields: [receiver_id], references: [user_id])
  content     String
  created_at  DateTime @default(now())
}
     
